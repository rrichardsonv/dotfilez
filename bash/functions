# Create a new directory and enter it
function md() {
  mkdir -p "$@" && cd "$@"
}

salt_the_earth () {
  echo $(pwd)
  echo -e "$(tput setaf 4)$(tput setab 2)Have you closed VSCode and are running this command in a terminal window?\n Input the corresponding number to continue. $(tput sgr0)"
  select yn in "Yes" "No"; do
      case $yn in
          Yes ) broken_arrow; break;;
          No ) echo "Bye Felicia"; break;;
      esac
  done
}

broken_arrow () {
  echo "$(tput setaf 4)$(tput setab 2)Deleting deps _build and .elixir_ls$(tput sgr0)"
  rm -rf deps _build .elixir_ls
  echo "$(tput setaf 4)$(tput setab 2)Getting your deps$(tput sgr0)"
  mix deps.get
  echo "$(tput setaf 4)$(tput setab 2)Starting elastic search...$(tput sgr0)"
  docker-compose up -d elasticsearch
  echo "$(tput setaf 4)$(tput setab 2)Running script/setup...$(tput sgr0)"
  # script/setup
}

function hand_turkey(){
  fswatch -r --event=Updated ./_build | sed -e 's/\/Users\/robertrichardson\/Repositories\/compilation_tester\/_build\/dev\/lib\/compilation_tester\///g;s/\.mix.+//g;sbin\/Elixir\.//g;s/\.beam//g;'
}

function tail_multiple(){
  osascript <<'EOF'
  tell application "iTerm"
      activate
      select first window

      # Create new tab
      tell current window
          create tab with default profile
      end tell

      # Split pane
      tell current session of current window
          split vertically with default profile
          split vertically with default profile
      end tell

      # Exec commands
      tell first session of current tab of current window
          write text "cd ~/Repositories/cars_platform"
          write text "tail_impressions \"beta-search\""
      end tell

      tell second session of current tab of current window
          write text "cd ~/Repositories/cars_platform"
          write text "tail_impressions \"beta-clicks\""
      end tell

      tell third session of current tab of current window
          write text "cd ~/Repositories/cars_platform"
          write text "tail_impressions \"beta-impressions\""
      end tell
    end tell
EOF
}

# Determine size of a file or total size of a directory
function fs() {
  if du -b /dev/null > /dev/null 2>&1; then
    local arg=-sbh
  else
    local arg=-sh
  fi
  if [[ -n "$@" ]]; then
    du $arg -- "$@"
  else
    du $arg .[^.]* *
  fi
}

# Use Git’s colored diff when available
hash git &>/dev/null
if [ $? -eq 0 ]; then
  function diff() {
    git diff --no-index --color-words "$@"
  }
fi

# Create a data URL from a file
function dataurl() {
  local mimeType=$(file -b --mime-type "$1")
  if [[ $mimeType == text/* ]]; then
    mimeType="${mimeType};charset=utf-8"
  fi
  echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
  local port="${1:-8000}"
  sleep 1 && open "http://localhost:${port}/" &
  # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
  # And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
  python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# Add note to Notes.app (OS X 10.8)
# Usage: `note 'foo'` or `echo 'foo' | note`
function note() {
  local text
  if [ -t 0 ]; then # argument
    text="$1"
  else # pipe
    text=$(cat)
  fi
  body=$(echo "$text" | sed -E 's|$|<br>|g')
  osascript >/dev/null <<EOF
tell application "Notes"
  tell account "iCloud"
    tell folder "Notes"
      make new note with properties {name:"$text", body:"$body"}
    end tell
  end tell
end tell
EOF
}

# git mv files and associated test
function g_mv_lt(){
  local action="mv" rm_seg='' app_seg='' src=''
  local rpre="\033[0m\033[0;31m" gpre="\033[0m\033[0;32m" cpre="\033[0m\033[0;36m"
  local ipre="[ \033[00;34m..\033[0m ]" rst="\033[0m"

  if [ $# -eq 0 ]
  then
    action="help"
  fi;

  args=("$@")

  for ((i=0; i < $#; i++))
  do
    local arg="${args[$i]}"
    case $arg in
      --help)
        action="help"
        ;;
      --dry)
        action="dry"
        ;;
      +*)
        app_seg=$(echo $arg | sed -E 's/\/*$//' | sed -E 's/^\+/\//' | sed -e 's/\//\\\//g')
        ;;
      -*)
        rm_seg=$(echo $arg | sed -E 's/-//' | sed -E 's/\/*$//' | sed -e 's/\//\\\//g')
        ;;
      *)
        src="$arg"
        ;;
    esac
  done;

  local base_src=$(basename $src)
  local app_seg_pattern="s/\/$base_src/$app_seg\/$base_src/"
  local rm_seg_pattern="s/$rm_seg\///"
  local dst=$(echo $src | sed -E "$rm_seg_pattern" | sed -E "$app_seg_pattern");
  local tst_src=$(echo $src | sed -E 's/lib/test/' | sed -E 's/.ex/_test.exs/');
  local tst_dst=$(echo $dst | sed -E 's/lib/test/' | sed -E 's/.ex/_test.exs/');
  echo '';
  case $action in
    help)
      echo "usage: g_mv_lt [<options>] <source>";
      printf "example: ${cpre}g_mv_lt --dry -foo/bar +quux apps/baz/lib/foo/bar/quux.ex${rst}\n"
      echo '';
      printf "    -${rpre}<path/to/remove>${rst}        removes path/to/remove from source\n";
      printf "    +${gpre}<path/to/append>${rst}        appends path/to/append to source\n";
      echo "    --dry                    prints planned move for given args";
      echo "    --help                   displays this message";
      ;;

    dry)
      printf "${ipre} The command given will make the following changes\n";
      echo '';
      if [ ! -z "$rm_seg" ]
      then
        printf "${rpre} remove${rst} $(echo $rm_seg | sed -E 's/\\\//\//g')\n";
      fi;

      if [ ! -z "$app_seg" ]
      then
        printf "${gpre} append${rst} $(echo $app_seg | sed -E 's/\\\//\//g')\n";
      fi;
      echo ''
      printf "${ipre} This will perform the following move\n";
      echo "$src -> $dst";
      echo "$tst_src -> $tst_dst";
      ;;

    mv)
      echo "${ipre} Executing git mv";
      echo "$src -> $dst";
      git mv $src $dst;
      echo '';
      echo "$tst_src -> $tst_dst";
      git mv $tst_src $tst_dst;
      ;;
  esac;
  echo '';
  printf "\n[${gpre}done${rst}]\n";
}

function quickgres() {
  PGPASSWORD='postgres' psql -t \
    -h localhost \
    -U postgres \
    -d engine_dev \
    -c "$1"
}

function tail_kafka(){
  local imp_file="./apps/kafka_repo/priv/kafka_local/$1.json"
  if [ $# -eq 2 ]; then
    echo "Pulling out $2 values from tail..."
    local jq_pattern="{key: .key, payload: (.payload | fromjson | to_entries | map(select(.key | test(\"$2\") ) ) | from_entries)}"
  else
    local jq_pattern="{key: .key, payload: (.payload | fromjson | .)}"
  fi
  rm $imp_file
  touch -a $imp_file
  echo ""
  tail -f $imp_file | jq --sort-keys "$jq_pattern"
}

function mult_cmd(){
  function define(){ IFS='\n' read -r -d '' ${1} || true; }
  args=("$@")

  define screept <<'ENDSCREEPT'
  on run(argv)
    global termCmd
    set termCmd to convertListToString(argv, space)
    tell application "iTerm"
      activate

      # Create new tab
      tell current window
          create tab with default profile
      end tell

      # excute cmd
      tell current session of current window
          write text termCmd
      end tell
    end tell
  end run

  on convertListToString(theList, theDelimiter)
    set AppleScript's text item delimiters to theDelimiter
    set theString to theList as string
    set AppleScript's text item delimiters to ""
    return theString
  end convertListToString
ENDSCREEPT

  for ((i=0; i < $#; i++))
  do
    local arg="${args[$i]}"
    local dir="~/Repositories/cars_platform"
    case $arg in
      -cd=*)
        dir=$(echo $arg | sed -E 's/-cd=//')
        ;;
      *)
        osascript -e "$screept" "cd $dir " '&&' "$arg"
        ;;
    esac
  done;
}

function underscore_branch(){
  git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* [^\/]*\/\(.*\)/\1/;s/-/_/g';
}


function ecto_mig(){
  cp `ls apps/engine/priv/repo/migrations/ | tail -n 1 | sed -e 's/^/apps\/engine\/priv\/repo\/migrations\//'` "apps/engine/priv/repo/migrations/$(date +"%Y%m%d%H%M%S")_$(underscore_branch).exs"
}

# god dang git
function goddangit () {
  local r="\360\237\244\226";
  local s="\342\234\205";
  local f="\342\233\224\357\270\217";
  local d="\360\237\221\213";
  printf " $r - Running rebase and push utility...\n"
  printf " $r - Checking working directory...\n"
  if [ -z "$(git status --porcelain)" ]; then
      OG_BRANCH=$(branch_name)
      ROOT_BRANCH=$(git remote show origin | grep 'HEAD branch' | sed 's/.*HEAD branch: //')
      printf " $s - Working directory clean.\n"
      echo "------------------------------------------"
      printf " $r - Rebasing onto latest origin/$ROOT_BRANCH...\n"
      git pull --rebase origin $ROOT_BRANCH
    if [ -z "$(git status --porcelain)" ]; then
      printf " $s - Rebase successful.\n"
      echo "------------------------------------------"
      printf " $r - Force pushing to update branch...\n"
      
      if ! git push origin $OG_BRANCH --no-verify --force-with-lease;
      then
        printf " $f - Push failed there may be additional output above\n"
        echo "------------------------------------------"
      else
        printf " $s - Push sucessful.\n"
        echo "------------------------------------------"
      fi
    else
      printf " $f - Not an easy rebase. Resolve your conflicts and run:\n"
      echo "------------------------------------------"
      echo git push origin $OG_BRANCH --no-verify --force-with-lease
      echo "------------------------------------------"
    fi
  else
    printf " $f - Cannot rebase when there are uncommited changes...\n"
    echo "------------------------------------------"
    echo "Sort out your mess first."
  fi

  printf " $d - Done.\n"
}
