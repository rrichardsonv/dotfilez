# Create a new directory and enter it
function md() {
  mkdir -p "$@" && cd "$@"
}

# Determine size of a file or total size of a directory
function fs() {
  if du -b /dev/null > /dev/null 2>&1; then
    local arg=-sbh
  else
    local arg=-sh
  fi
  if [[ -n "$@" ]]; then
    du $arg -- "$@"
  else
    du $arg .[^.]* *
  fi
}

# Use Git’s colored diff when available
hash git &>/dev/null
if [ $? -eq 0 ]; then
  function diff() {
    git diff --no-index --color-words "$@"
  }
fi

# Create a data URL from a file
function dataurl() {
  local mimeType=$(file -b --mime-type "$1")
  if [[ $mimeType == text/* ]]; then
    mimeType="${mimeType};charset=utf-8"
  fi
  echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
  local port="${1:-8000}"
  sleep 1 && open "http://localhost:${port}/" &
  # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
  # And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
  python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# Add note to Notes.app (OS X 10.8)
# Usage: `note 'foo'` or `echo 'foo' | note`
function note() {
  local text
  if [ -t 0 ]; then # argument
    text="$1"
  else # pipe
    text=$(cat)
  fi
  body=$(echo "$text" | sed -E 's|$|<br>|g')
  osascript >/dev/null <<EOF
tell application "Notes"
  tell account "iCloud"
    tell folder "Notes"
      make new note with properties {name:"$text", body:"$body"}
    end tell
  end tell
end tell
EOF
}

# git mv files and associated test
function g_mv_lt(){
  local action="mv" rm_seg='' app_seg='' src=''
  local rpre="\033[0m\033[0;31m" gpre="\033[0m\033[0;32m" cpre="\033[0m\033[0;36m"
  local ipre="[ \033[00;34m..\033[0m ]" rst="\033[0m"

  if [ $# -eq 0 ]
  then
    action="help"
  fi;

  args=("$@")

  for ((i=0; i < $#; i++))
  do
    local arg="${args[$i]}"
    case $arg in
      --help)
        action="help"
        ;;
      --dry)
        action="dry"
        ;;
      +*)
        app_seg=$(echo $arg | sed -E 's/\/*$//' | sed -E 's/^\+/\//' | sed -e 's/\//\\\//g')
        ;;
      -*)
        rm_seg=$(echo $arg | sed -E 's/-//' | sed -E 's/\/*$//' | sed -e 's/\//\\\//g')
        ;;
      *)
        src="$arg"
        ;;
    esac
  done;

  local base_src=$(basename $src)
  local app_seg_pattern="s/\/$base_src/$app_seg\/$base_src/"
  local rm_seg_pattern="s/$rm_seg\///"
  local dst=$(echo $src | sed -E "$rm_seg_pattern" | sed -E "$app_seg_pattern");
  local tst_src=$(echo $src | sed -E 's/lib/test/' | sed -E 's/.ex/_test.exs/');
  local tst_dst=$(echo $dst | sed -E 's/lib/test/' | sed -E 's/.ex/_test.exs/');
  echo '';
  case $action in
    help)
      echo "usage: g_mv_lt [<options>] <source>";
      printf "example: ${cpre}g_mv_lt --dry -foo/bar +quux apps/baz/lib/foo/bar/quux.ex${rst}\n"
      echo '';
      printf "    -${rpre}<path/to/remove>${rst}        removes path/to/remove from source\n";
      printf "    +${gpre}<path/to/append>${rst}        appends path/to/append to source\n";
      echo "    --dry                    prints planned move for given args";
      echo "    --help                   displays this message";
      ;;

    dry)
      printf "${ipre} The command given will make the following changes\n";
      echo '';
      if [ ! -z "$rm_seg" ]
      then
        printf "${rpre} remove${rst} $(echo $rm_seg | sed -E 's/\\\//\//g')\n";
      fi;

      if [ ! -z "$app_seg" ]
      then
        printf "${gpre} append${rst} $(echo $app_seg | sed -E 's/\\\//\//g')\n";
      fi;
      echo ''
      printf "${ipre} This will perform the following move\n";
      echo "$src -> $dst";
      echo "$tst_src -> $tst_dst";
      ;;

    mv)
      echo "${ipre} Executing git mv";
      echo "$src -> $dst";
      git mv $src $dst;
      echo '';
      echo "$tst_src -> $tst_dst";
      git mv $tst_src $tst_dst;
      ;;
  esac;
  echo '';
  printf "\n[${gpre}done${rst}]\n";
}

function tail_impressions(){
  local imp_file="./apps/kafka_repo/priv/kafka_local/$1.json"

  rm $imp_file && echo "Removing $imp_file"

  touch -a $imp_file && echo "Creating new $imp_file"

  echo "Tailing logs..."
  echo ""
  tail -f $imp_file | sed -e $'
    s/[{}]/\\\n/g
    s/,"/\\\033[39m\\\033[0m\\\n\"/g;
    s/\\n"/\\\n\\\033[32m\"/g;
    s/":/"\\\033[39m:/g;
    s/:null/\\\033[35m:null\\\033[0m/g;
    s/:"/:\\\033[33;1m"/g
  '
}
